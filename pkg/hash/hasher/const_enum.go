// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package hasher

import (
	"fmt"
)

const (
	// HasherSHA1 is a Hasher of type SHA1.
	HasherSHA1 Hasher = iota
	// HasherSHA256 is a Hasher of type SHA256.
	HasherSHA256
	// HasherSHA512 is a Hasher of type SHA512.
	HasherSHA512
)

const _HasherName = "SHA1SHA256SHA512"

var _HasherMap = map[Hasher]string{
	HasherSHA1:   _HasherName[0:4],
	HasherSHA256: _HasherName[4:10],
	HasherSHA512: _HasherName[10:16],
}

// String implements the Stringer interface.
func (x Hasher) String() string {
	if str, ok := _HasherMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Hasher(%d)", x)
}

var _HasherValue = map[string]Hasher{
	_HasherName[0:4]:   HasherSHA1,
	_HasherName[4:10]:  HasherSHA256,
	_HasherName[10:16]: HasherSHA512,
}

// ParseHasher attempts to convert a string to a Hasher.
func ParseHasher(name string) (Hasher, error) {
	if x, ok := _HasherValue[name]; ok {
		return x, nil
	}
	return Hasher(0), fmt.Errorf("%s is not a valid Hasher", name)
}

// MarshalText implements the text marshaller method.
func (x Hasher) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Hasher) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseHasher(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
